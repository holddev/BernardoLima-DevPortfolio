---
import { content } from "../constants/consts";
import Logo from "./icons/Logo.astro";
---

<header
  class="bg-[#0d111746] backdrop-blur-sm text-[#e5e7eb]
   w-full fixed top-0 left-0 z-10"
>
  <div
    class="header w-full flex justify-center sm:justify-between items-center max-w-7xl mx-auto py-2 px-5 sm:px-10"
  >
    <h2 class="sm:block hidden">
      <a href="#inicio" title="Portfolio logo" aria-label="Portfolio logo"
        ><Logo class="size-10" /></a
      >
    </h2>
    <nav class="w-full sm:w-fit">
      <ul
        class="flex justify-between items-center sm:gap-10 font-questrial text-base"
      >
        {
          content.navLinks.map(({ href, text }) => {
            return (
              <li>
                <a
                  id="item-menu"
                  class="group hover:text-primary/80 transition flex flex-col"
                  aria-label={text}
                  href={href}
                >
                  {text}
                  <hr class="inline-block w-[10px] group-hover:w-full group-[.active]:w-full h-[2px] border-none bg-primary/80 rounded-full transition-[width] duration-500" />
                </a>
              </li>
            );
          })
        }
      </ul>
    </nav>
  </div>
</header>

<script>
  const itemsMenu = document.querySelectorAll(
    "header nav ul li a",
  ) as NodeListOf<HTMLAnchorElement>;
  const sections = document.querySelectorAll("main section");

  if (itemsMenu.length > 0 && sections.length > 0) {
    const observerCallback = function (
      entries: IntersectionObserverEntry[],
      itemsMenu: NodeListOf<HTMLAnchorElement>,
    ) {
      entries.forEach((entry) => {
        const id = entry.target.id;
        if (entry.isIntersecting) {
          itemsMenu.forEach((item) => {
            if (item.getAttribute("href") === `#${id}`) {
              item.classList.add("text-primary/80", "active");
            } else {
              item.classList.remove("text-primary/80", "active");
            }
          });
        }
      });
    };

    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: "70px",
      threshold: 0.5,
    };

    const observer = new IntersectionObserver((entries) => {
      observerCallback(entries, itemsMenu);
    }, observerOptions);

    sections.forEach((section) => {
      observer.observe(section);
    });
  }
</script>
